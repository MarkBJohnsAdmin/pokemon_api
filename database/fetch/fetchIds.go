package fetch

import (
	"fmt"
	"sync"
)

func generateRange(end int) []interface{} {
	slice := make([]interface{}, end)
	for i := 0; i < end; i++ {
		slice[i] = i + 1
	}
	return slice
}

func makeStrings(input []interface{}) []string {
	stringSlice := make([]string, len(input))

	var wg sync.WaitGroup
	var mu sync.Mutex

	wg.Add(len(input))

	for i, val := range input {
		go func(i int, v interface{}) {
			defer wg.Done()

			str := fmt.Sprintf("%v", v)

			mu.Lock()
			stringSlice[i] = str
			mu.Unlock()

		}(i, val)
	}
	wg.Wait()
	return stringSlice
}

func PokemonIds() []string {
	// PokeAPI doesn't have a good way to order the Pokemon so that each evolution family is together. There are also issues with the API where some Pokemon
	//	can't be looked up by their ID and others can't be looked up by their names. This is set up so each Pokemon is put with their evolution chain and
	//	regional forms, and given an "order" number to add to the database
	ids := []interface{}{
		1, 2, 3, 10033, 4, 5, 6, 10034, 10035, 7, 8, 9, 10036, 10, 11, 12, 13, 14, 15, 10090, 16, 17, 18, 10073, 19, 10091, 20, 10092, 21, 22, 23, 24, 172,
		25, 26, 10100, 27, 10101, 28, 10102, 29, 30, 31, 32, 33, 34, 173, 35, 36, 37, 10103, 38, 10104, 174, 39, 40, 41, 42, 169, 43, 44, 45, 182, 46, 47,
		48, 49, 50, 10105, 51, 10106, 52, 10107, 10161, 53, 10108, 863, 54, 55, 56, 57, 979, 58, 10229, 59, 10230, 60, 61, 62, 186, 63, 64, 65, 10037, 66,
		67, 68, 69, 70, 71, 72, 73, 74, 10109, 75, 10110, 76, 10111, 77, 10162, 78, 10163, 79, 10164, 80, 10165, 10071, 199, 10172, 81, 82, 462, 83, 10166,
		865, 84, 85, 86, 87, 88, 10112, 89, 10113, 90, 91, 92, 93, 94, 10038, 95, 208, 10072, 96, 97, 98, 99, 100, 10231, 101, 10232, 102, 103, 10114, 104,
		105, 10115, 236, 106, 107, 237, 108, 463, 109, 110, 10167, 111, 112, 464, 440, 113, 242, 114, 465, 115, 10039, 116, 117, 230, 118, 119, 120, 121, 439,
		122, 10168, 866, 123, 212, 10046, 900, 238, 124, 239, 125, 466, 240, 126, 467, 127, 10040, 128, 10250, 10251, 10252, 129, 130, 10041, 131, 132, 133,
		134, 135, 136, 196, "umbreon", 470, 471, 700, 137, 233, 474, 138, 139, 140, 141, 142, 10042, 446, 143, 144, 10169, 145, 10170, 146, 10171, 147, 148, 149, 150,
		10043, 10044, 151, 152, 153, 154, 155, 156, 157, 10233, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 175, 176, 468, 177, 178, 179,
		180, 181, 10045, 298, 183, 184, 438, 185, 187, 188, 189, 190, 424, 191, 192, 193, 469, 194, 10253, 195, 980, 198, 430, 200, 429, 201, 360, 202, 203, 981,
		204, 205, 206, 982, 10255, 207, 472, 209, 210, 211, 10234, 904, 213, 214, 10047, 215, 10235, 461, 903, 216, 217, 901, 10272, 218, 219, 220, 221, 473, 222,
		10173, 864, 223, 224, 225, 458, 226, 227, 228, 229, 10048, 231, 232, 234, 899, 235, 241, 243, 244, 245, 246, 247, 248, 10049, 249, 250, 251, 252, 253, 254,
		10065, 255, 256, 257, 10050, 258, 259, 260, 10064, 261, 262, 263, 10174, 264, 10175, 862, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
		278, 279, 280, "kirlia", 282, 10051, 475, 10068, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 476, 300, 301, 302, 10066, 303,
		10052, 304, 305, 306, 10053, 307, 308, 10054, 309, 310, 10055, 311, 312, 313, 314, 406, 315, 407, 316, 317, 318, 319, 10070, 320, 321, 322, 323, 10087, 324,
		325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 10067, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 10013, 10014,
		10015, 352, 353, 354, 10056, 355, 356, 477, 357, 433, 358, 359, 10057, 361, 362, 10074, 478, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 10089,
		374, 375, 376, 10076, 377, 378, 379, 380, 10062, 381, 10063, 382, 10077, 383, 10078, 384, 10079, 385, 386, 10001, 10002, 10003, 387, 388, 389, 390, 391, 392,
		393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 10004, 10005, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
		425, 426, 427, 428, 10088, 431, 432, 434, 435, 436, 437, 441, 442, 443, 444, 445, "garchomp-mega", 447, 448, 10059, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460,
		10060, 479, 10008, 10009, 10010, 10011, 10012, 480, 481, 482, 483, 10245, 484, 10246, 485, 486, 487, 10007, 488, 489, 490, 491, 492, 10006, 493, 494, 495, 496,
		497, 498, 499, 500, 501, 502, 503, 10236, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
		528, 529, 530, 531, 10069, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 10237, 550, 10016, 10247, 902, 10248, 551,
		552, 553, 554, 10176, 555, 10017, 10177, 10178, 556, 557, 558, 559, 560, 561, 562, 10179, 563, 867, 564, 565, 566, 567, 568, 569, 570, 10238, 571, 10239, 572,
		573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604,
		605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 10180, 619, 620, 621, 622, 623, 624, 625, 983, 626, 627, 628, 10240, 629, 630, 631, 632,
		633, 634, 635, 636, 637, 638, 639, 640, 641, 10019, 642, 10020, 643, 644, 645, 10021, 646, 10023, 10022, 647, 10024, 648, 10018, 649, 650, 651, 652, 653, 654,
		655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 10025, 679, 680, 681, 10026, 682, 683,
		684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 10241, 706, 10242, 707, 708, 709, 710, 711, 712, 713,
		10243, 714, 715, 716, 717, 718, 10181, 10120, 719, 10075, 720, 10086, 721, 722, 723, 724, 10244, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
		738, 739, 740, 741, 10123, 10124, 10125, 742, 743, 744, 745, 10126, 10152, 746, 10127, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
		762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 10136, 10137, 10138, 10139, 10140, 10141, 10142, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
		785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 10155, 10156, 10157, 801, 10147, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
		812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 1011, 1019,
		843, 844, 845, 846, 847, 848, 849, 10184, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 868, 869, 870, 871, 872, 873, 874, 875, 10185, 876, 10186, 877,
		10187, 878, 879, 880, 881, 882, 883, 884, 1018, 885, 886, 887, 888, 10188, 889, 10189, 890, 10190, 891, 892, 10191, 893, 894, 895, 896, 897, 898, 10193, 10194, 905,
		10249, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 10254, 917, 918, 919, 920, 921, 922, 923, 924, 925, 10257, 926, 927, 928, 929, 930, 931, 10260, 10261,
		10262, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
		964, 10256, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 10258, 10259, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
		998, 999, 10263, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 10273, 10274, 10275, 1020, 1021, 1022, 1023, 1024,
		10276, 10277, 1025}

	return makeStrings(ids)
}

func SpeciesIds() []string {
	return makeStrings(generateRange(1025))
}

func AbilityIds() []string {
	return makeStrings(generateRange(307))
}

func MoveIds() []string {
	ids := generateRange(919)
	ids[540] = "tail-slap"
	return makeStrings(ids)
}

func MachineIds() []string {
	return makeStrings(generateRange(2102))
}
